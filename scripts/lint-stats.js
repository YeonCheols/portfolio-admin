#!/usr/bin/env node

const { execSync } = require('child_process');

try {
  // ESLint Ïã§Ìñâ
  const result = execSync('npx next lint --format=compact', {
    encoding: 'utf8',
    cwd: process.cwd(),
    stdio: ['pipe', 'pipe', 'pipe'],
  });

  // Í≤∞Í≥º ÌååÏã±
  const lines = result.split('\n');
  const lastLine = lines[lines.length - 1];

  // Î¨∏Ï†ú Ïàò Ï∂îÏ∂ú
  const match = lastLine.match(/(\d+) problems? \((\d+) errors?, (\d+) warnings?\)/);

  if (match) {
    const [, total, errors, warnings] = match;
    // eslint-disable-next-line no-console
    console.info('üìä ESLint Statistics:');
    // eslint-disable-next-line no-console
    console.info(`   Total: ${total}`);
    // eslint-disable-next-line no-console
    console.info(`   Errors: ${errors}`);
    // eslint-disable-next-line no-console
    console.info(`   Warnings: ${warnings}`);

    // ÏÉâÏÉÅ Ï∂úÎ†•
    const errorColor = errors > 0 ? '\x1b[31m' : '\x1b[32m'; // Îπ®Í∞ï ÎòêÎäî Ï¥àÎ°ù
    const warningColor = warnings > 0 ? '\x1b[33m' : '\x1b[32m'; // ÎÖ∏Îûë ÎòêÎäî Ï¥àÎ°ù
    const resetColor = '\x1b[0m';

    // eslint-disable-next-line no-console
    console.info(`\n${errorColor}Errors: ${errors}${resetColor}`);
    // eslint-disable-next-line no-console
    console.info(`${warningColor}Warnings: ${warnings}${resetColor}`);

    // Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï
    process.exit(errors > 0 ? 1 : 0);
  } else {
    // eslint-disable-next-line no-console
    console.info('‚úÖ No ESLint problems found!');
    process.exit(0);
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('‚ùå Error running ESLint:', error.message);
  process.exit(1);
}
